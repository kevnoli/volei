"""empty message

Revision ID: 28b04ebf7b20
Revises: ac4f259a6321
Create Date: 2024-05-02 11:37:32.917074

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '28b04ebf7b20'
down_revision: Union[str, None] = 'ac4f259a6321'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('event_group_id_fkey', 'event', type_='foreignkey')
    op.drop_table('groupplayer')
    op.drop_table('group')
    op.drop_column('event', 'group_id')
    op.add_column(
        'player',
        sa.Column(
            'first_name',
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False))
    op.add_column(
        'player',
        sa.Column(
            'last_name',
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False))
    op.add_column(
        'player',
        sa.Column(
            'overall_rating',
            sa.Numeric(
                precision=3,
                scale=2),
            nullable=False))
    op.drop_column('player', 'name')
    op.drop_column('team', 'name')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'team',
        sa.Column(
            'name',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False))
    op.add_column(
        'player',
        sa.Column(
            'name',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False))
    op.drop_column('player', 'overall_rating')
    op.drop_column('player', 'last_name')
    op.drop_column('player', 'first_name')
    op.add_column(
        'event',
        sa.Column(
            'group_id',
            sa.INTEGER(),
            autoincrement=False,
            nullable=False))
    op.create_foreign_key(
        'event_group_id_fkey',
        'event',
        'group',
        ['group_id'],
        ['id'])
    op.create_table(
        'group',
        sa.Column(
            'id',
            sa.INTEGER(),
            server_default=sa.text("nextval('group_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False),
        sa.Column(
            'name',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False),
        sa.PrimaryKeyConstraint(
            'id',
            name='group_pkey'),
        postgresql_ignore_search_path=False)
    op.create_table('groupplayer',
                    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name='groupplayer_group_id_fkey'),
                    sa.ForeignKeyConstraint(['player_id'], ['player.id'], name='groupplayer_player_id_fkey'),
                    sa.PrimaryKeyConstraint('group_id', 'player_id', name='groupplayer_pkey')
                    )
    # ### end Alembic commands ###
